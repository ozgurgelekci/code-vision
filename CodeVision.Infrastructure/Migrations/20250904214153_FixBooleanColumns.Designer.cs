// <auto-generated />
using System;
using CodeVision.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CodeVision.Infrastructure.Migrations
{
    [DbContext(typeof(CodeVisionDbContext))]
    [Migration("20250904214153_FixBooleanColumns")]
    partial class FixBooleanColumns
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.8");

            modelBuilder.Entity("CodeVision.Core.Entities.AnalysisNotification", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRead")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("PullRequestAnalysisId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("IsRead");

                    b.HasIndex("PullRequestAnalysisId");

                    b.ToTable("AnalysisNotifications");
                });

            modelBuilder.Entity("CodeVision.Core.Entities.PullRequestAnalysis", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("GptSuggestions")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("PrAuthor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("PrNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PrTitle")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ProcessedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("QualityScore")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RawDiff")
                        .HasColumnType("text");

                    b.Property<string>("RepoName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("RiskLevel")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RoslynFindings")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProcessedAt");

                    b.HasIndex("QualityScore");

                    b.HasIndex("RiskLevel");

                    b.HasIndex("Status");

                    b.HasIndex("RepoName", "PrNumber")
                        .IsUnique();

                    b.ToTable("PullRequestAnalyses");
                });

            modelBuilder.Entity("CodeVision.Core.Entities.AnalysisNotification", b =>
                {
                    b.HasOne("CodeVision.Core.Entities.PullRequestAnalysis", "PullRequestAnalysis")
                        .WithMany("Notifications")
                        .HasForeignKey("PullRequestAnalysisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PullRequestAnalysis");
                });

            modelBuilder.Entity("CodeVision.Core.Entities.PullRequestAnalysis", b =>
                {
                    b.Navigation("Notifications");
                });
#pragma warning restore 612, 618
        }
    }
}
