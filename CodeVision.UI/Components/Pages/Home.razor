@page "/"
@using CodeVision.UI.Services
@using System.Linq
@inject IApiService ApiService
@inject NavigationManager NavigationManager
@inject Microsoft.JSInterop.IJSRuntime JS
@rendermode InteractiveServer
@using Microsoft.AspNetCore.SignalR.Client
@implements IAsyncDisposable

<PageTitle>CodeVision - AI Code Analysis Dashboard</PageTitle>

<style>
    /* Inline Modern Dashboard Override */
    .modern-dashboard {
        padding: 24px !important;
        max-width: 1400px !important;
        margin: 0 auto !important;
        background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%) !important;
        min-height: 100vh !important;
        font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif !important;
    }

    .dashboard-header {
        margin-bottom: 32px !important;
    }

    .header-content {
        display: flex !important;
        justify-content: space-between !important;
        align-items: center !important;
        background: white !important;
        padding: 24px !important;
        border-radius: 16px !important;
        box-shadow: 0 1px 3px rgba(0,0,0,0.1) !important;
        border: 1px solid #e2e8f0 !important;
    }

    .dashboard-title {
        font-size: 28px !important;
        font-weight: 700 !important;
        color: #1a202c !important;
        margin: 0 !important;
        display: flex !important;
        align-items: center !important;
        gap: 12px !important;
    }

    .dashboard-title i {
        color: #3b82f6 !important;
        font-size: 32px !important;
    }

    /* Toasts */
    .toast-container {
        position: fixed !important;
        top: 16px !important;
        right: 16px !important;
        z-index: 2000 !important;
        display: flex !important;
        flex-direction: column !important;
        gap: 10px !important;
    }
    .toast {
        display: flex !important;
        align-items: start !important;
        gap: 10px !important;
        background: #111827 !important;
        color: white !important;
        padding: 12px 14px !important;
        border-radius: 10px !important;
        min-width: 280px !important;
        max-width: 420px !important;
        box-shadow: 0 10px 30px rgba(0,0,0,0.35) !important;
        border-left: 4px solid #3b82f6 !important;
        animation: slideIn .2s ease-out !important;
    }
    .toast.success { border-left-color: #10b981 !important; }
    .toast.info { border-left-color: #3b82f6 !important; }
    .toast.warning { border-left-color: #f59e0b !important; }
    .toast .toast-title { font-weight: 700 !important; font-size: 14px !important; }
    .toast .toast-text { font-size: 13px !important; opacity: .95 !important; }
    .toast .toast-close { background: transparent !important; color: #9ca3af !important; border: none !important; cursor: pointer !important; }
    .toast .progress { height: 3px !important; background: rgba(255,255,255,.15) !important; border-radius: 2px !important; overflow: hidden !important; margin-top: 8px !important; }
    .toast .progress > div { height: 100% !important; background: #3b82f6 !important; width: 100% !important; animation: countdown 60s linear forwards !important; }
    .toast.success .progress > div { background: #10b981 !important; }
    .toast.warning .progress > div { background: #f59e0b !important; }
    @@keyframes countdown { from { width: 100% } to { width: 0 } }
    @@keyframes slideIn { from { transform: translateY(-6px); opacity: 0 } to { transform: translateY(0); opacity: 1 } }

    .dashboard-subtitle {
        color: #64748b !important;
        font-size: 16px !important;
        margin: 8px 0 0 0 !important;
        font-weight: 400 !important;
    }

    /* .refresh-button removed */

    .stats-grid {
        display: grid !important;
        grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)) !important;
        gap: 20px !important;
        margin-bottom: 32px !important;
    }

    .stat-card {
        background: white !important;
        border-radius: 16px !important;
        padding: 24px !important;
        border: 1px solid #e2e8f0 !important;
        box-shadow: 0 1px 3px rgba(0,0,0,0.1) !important;
        transition: transform 0.2s ease !important;
    }

    .stat-card:hover {
        transform: translateY(-2px) !important;
        box-shadow: 0 8px 24px rgba(0,0,0,0.12) !important;
    }

    .stat-icon {
        width: 48px !important;
        height: 48px !important;
        border-radius: 12px !important;
        display: flex !important;
        align-items: center !important;
        justify-content: center !important;
        font-size: 24px !important;
        margin-bottom: 16px !important;
        background: linear-gradient(135deg, #ddd6fe, #c4b5fd) !important;
        color: #7c3aed !important;
    }

    .stat-number {
        font-size: 32px !important;
        font-weight: 800 !important;
        color: #1a202c !important;
        margin-bottom: 4px !important;
    }

    .stat-label {
        font-size: 14px !important;
        font-weight: 600 !important;
        color: #64748b !important;
        margin-bottom: 8px !important;
    }

    .stat-description {
        font-size: 13px !important;
        color: #94a3b8 !important;
    }

    .analyses-section {
        margin-top: 32px !important;
    }

    .section-title {
        font-size: 20px !important;
        font-weight: 700 !important;
        color: #1a202c !important;
        display: flex !important;
        align-items: center !important;
        gap: 8px !important;
        margin: 0 0 24px 0 !important;
    }

    .analyses-grid {
        display: grid !important;
        grid-template-columns: repeat(auto-fit, minmax(380px, 1fr)) !important;
        gap: 20px !important;
    }

    .analysis-card {
        background: white !important;
        border-radius: 16px !important;
        padding: 24px !important;
        border: 1px solid #e2e8f0 !important;
        box-shadow: 0 1px 3px rgba(0,0,0,0.1) !important;
        transition: transform 0.2s ease !important;
    }

    .analysis-card.high-risk {
        border-left: 4px solid #ef4444 !important;
    }

    .analysis-card.low-risk {
        border-left: 4px solid #10b981 !important;
    }

    /* Detail Button */
    .detail-button {
        background: #3b82f6 !important;
        color: white !important;
        border: none !important;
        padding: 8px 16px !important;
        border-radius: 8px !important;
        font-size: 14px !important;
        font-weight: 600 !important;
        cursor: pointer !important;
        display: flex !important;
        align-items: center !important;
        gap: 6px !important;
        transition: all 0.2s ease !important;
    }

    .detail-button:hover {
        background: #2563eb !important;
        transform: translateY(-1px) !important;
    }

    .analysis-footer {
        display: flex !important;
        justify-content: space-between !important;
        align-items: center !important;
        margin-top: 16px !important;
        padding-top: 16px !important;
        border-top: 1px solid #e2e8f0 !important;
    }

    /* Modal Styles */
    .modal-overlay {
        position: fixed !important;
        top: 0 !important;
        left: 0 !important;
        right: 0 !important;
        bottom: 0 !important;
        background: rgba(0, 0, 0, 0.7) !important;
        display: flex !important;
        align-items: center !important;
        justify-content: center !important;
        z-index: 1000 !important;
        opacity: 1 !important;
        transition: opacity 0.2s ease !important;
    }

    .modal-content {
        background: white !important;
        border-radius: 16px !important;
        width: 90% !important;
        max-width: 800px !important;
        max-height: 90vh !important;
        overflow: hidden !important;
        box-shadow: 0 25px 50px rgba(0, 0, 0, 0.25) !important;
        transform: scale(1) !important;
        transition: transform 0.3s ease !important;
    }

    .modal-header {
        display: flex !important;
        justify-content: space-between !important;
        align-items: center !important;
        padding: 24px !important;
        border-bottom: 1px solid #e2e8f0 !important;
        background: #f8fafc !important;
    }

    .modal-title {
        font-size: 20px !important;
        font-weight: 700 !important;
        color: #1a202c !important;
        margin: 0 !important;
        display: flex !important;
        align-items: center !important;
        gap: 8px !important;
    }

    .modal-close {
        background: none !important;
        border: none !important;
        font-size: 18px !important;
        cursor: pointer !important;
        color: #64748b !important;
        padding: 8px !important;
        border-radius: 8px !important;
        transition: all 0.2s ease !important;
    }

    .modal-close:hover {
        background: #e2e8f0 !important;
        color: #1a202c !important;
    }

    .modal-body {
        padding: 24px !important;
        max-height: calc(90vh - 180px) !important;
        overflow-y: auto !important;
    }

    .modal-footer {
        padding: 24px !important;
        border-top: 1px solid #e2e8f0 !important;
        display: flex !important;
        justify-content: flex-end !important;
        background: #f8fafc !important;
    }

    .detail-section {
        margin-bottom: 32px !important;
    }

    .detail-section:last-child {
        margin-bottom: 0 !important;
    }

    .detail-header {
        margin-bottom: 16px !important;
    }

    .detail-header h4 {
        font-size: 16px !important;
        font-weight: 600 !important;
        color: #1a202c !important;
        margin: 0 !important;
        display: flex !important;
        align-items: center !important;
        gap: 8px !important;
    }

    .detail-grid {
        display: grid !important;
        grid-template-columns: 1fr 1fr !important;
        gap: 16px !important;
    }

    .detail-item {
        display: flex !important;
        flex-direction: column !important;
        gap: 4px !important;
    }

    .detail-label {
        font-size: 12px !important;
        font-weight: 600 !important;
        color: #64748b !important;
        text-transform: uppercase !important;
        letter-spacing: 0.5px !important;
    }

    .detail-value {
        font-size: 14px !important;
        font-weight: 500 !important;
        color: #1a202c !important;
    }

    .summary-content {
        background: #f8fafc !important;
        padding: 16px !important;
        border-radius: 8px !important;
        border: 1px solid #e2e8f0 !important;
        font-size: 14px !important;
        line-height: 1.6 !important;
        color: #374151 !important;
    }
    .summary-content h1, .summary-content h2, .summary-content h3, .summary-content h4 {
        display: block !important;
        margin-top: 8px !important;
    }
    .summary-content ol, .summary-content ul {
        padding-left: 20px !important;
        margin: 8px 0 !important;
    }

    .suggestion-item, .finding-item {
        background: #f8fafc !important;
        border: 1px solid #e2e8f0 !important;
        border-radius: 8px !important;
        padding: 16px !important;
        margin-bottom: 12px !important;
    }

    .suggestion-header, .finding-header {
        display: flex !important;
        gap: 8px !important;
        margin-bottom: 8px !important;
        align-items: center !important;
        flex-wrap: wrap !important;
    }

    .suggestion-type, .finding-rule, .finding-severity, .finding-category, .suggestion-priority, .impact-score {
        padding: 4px 8px !important;
        border-radius: 4px !important;
        font-size: 12px !important;
        font-weight: 600 !important;
        text-transform: uppercase !important;
    }

    .suggestion-type {
        background: #dbeafe !important;
        color: #1e40af !important;
    }

    .suggestion-priority.priority-high, .finding-severity.severity-error {
        background: #fecaca !important;
        color: #dc2626 !important;
    }

    .suggestion-priority.priority-medium, .finding-severity.severity-warning {
        background: #fde68a !important;
        color: #d97706 !important;
    }

    .suggestion-priority.priority-low, .finding-severity.severity-info {
        background: #d1fae5 !important;
        color: #059669 !important;
    }

    .impact-score {
        background: #f3e8ff !important;
        color: #7c3aed !important;
    }

    .suggestion-title {
        font-size: 16px !important;
        font-weight: 600 !important;
        color: #1a202c !important;
        margin: 8px 0 !important;
    }

    .suggestion-description, .finding-message {
        font-size: 14px !important;
        line-height: 1.6 !important;
        color: #374151 !important;
        margin-bottom: 8px !important;
    }

    .suggested-code pre {
        background: #1f2937 !important;
        color: #f9fafb !important;
        padding: 12px !important;
        border-radius: 6px !important;
        font-size: 13px !important;
        overflow-x: auto !important;
        margin: 8px 0 !important;
    }

    .suggestion-tags, .finding-location {
        display: flex !important;
        gap: 6px !important;
        flex-wrap: wrap !important;
        margin-top: 8px !important;
        align-items: center !important;
    }

    .tag {
        background: #e2e8f0 !important;
        color: #64748b !important;
        padding: 2px 8px !important;
        border-radius: 12px !important;
        font-size: 12px !important;
        font-weight: 500 !important;
    }

    .finding-location {
        font-size: 12px !important;
        color: #64748b !important;
    }

    .secondary-button {
        background: #f1f5f9 !important;
        color: #374151 !important;
        border: 1px solid #d1d5db !important;
        padding: 12px 24px !important;
        border-radius: 8px !important;
        font-weight: 600 !important;
        cursor: pointer !important;
        transition: all 0.2s ease !important;
    }

    .secondary-button:hover {
        background: #e2e8f0 !important;
        border-color: #9ca3af !important;
    }

    /* Smooth modal transitions */

    /* Hide old layout completely */
    .page, .sidebar, .top-row, .navbar, .nav-scrollable, .content {
        display: none !important;
    }

    /* Force main content to be visible */
    body {
        margin: 0 !important;
        padding: 0 !important;
    }

    /* Toast Notification Styles */
    .toast-container {
        position: fixed !important;
        top: 20px !important;
        right: 20px !important;
        z-index: 9999 !important;
        animation: slideInRight 0.3s ease-out !important;
    }

    .toast {
        display: flex !important;
        align-items: center !important;
        justify-content: space-between !important;
        background: white !important;
        border-radius: 12px !important;
        padding: 16px 20px !important;
        box-shadow: 0 8px 32px rgba(0,0,0,0.12) !important;
        border-left: 4px solid #3b82f6 !important;
        min-width: 320px !important;
        max-width: 400px !important;
        font-family: 'Inter', sans-serif !important;
    }

    .toast.info {
        border-left-color: #3b82f6 !important;
    }

    .toast.warning {
        border-left-color: #f59e0b !important;
    }

    .toast.success {
        border-left-color: #10b981 !important;
    }

    .toast.error {
        border-left-color: #ef4444 !important;
    }

    .toast-title {
        font-weight: 600 !important;
        font-size: 14px !important;
        color: #1f2937 !important;
        margin-bottom: 4px !important;
    }

    .toast-text {
        font-size: 13px !important;
        color: #6b7280 !important;
        line-height: 1.4 !important;
        white-space: pre-line !important;
    }

    .toast-close {
        background: none !important;
        border: none !important;
        color: #9ca3af !important;
        cursor: pointer !important;
        padding: 4px !important;
        border-radius: 4px !important;
        display: flex !important;
        align-items: center !important;
        justify-content: center !important;
        margin-left: 12px !important;
        transition: all 0.2s ease !important;
    }

    .toast-close:hover {
        background: #f3f4f6 !important;
        color: #374151 !important;
    }

    .progress {
        position: absolute !important;
        bottom: 0 !important;
        left: 0 !important;
        right: 0 !important;
        height: 3px !important;
        background: #f3f4f6 !important;
        border-radius: 0 0 12px 12px !important;
        overflow: hidden !important;
    }

    .progress div {
        height: 100% !important;
        background: #3b82f6 !important;
        animation: progressBar 60s linear forwards !important;
    }

    @@keyframes slideInRight {
        from {
            transform: translateX(100%) !important;
            opacity: 0 !important;
        }
        to {
            transform: translateX(0) !important;
            opacity: 1 !important;
        }
    }

    @@keyframes progressBar {
        from {
            width: 100% !important;
        }
        to {
            width: 0% !important;
        }
    }
</style>

<div class="modern-dashboard">
    <!-- Header -->
    <div class="dashboard-header">
        <div class="header-content">
            <div class="header-info">
                <h1 class="dashboard-title">
                    <i class="bi bi-cpu"></i>
                    CodeVision Dashboard
                </h1>
                <p class="dashboard-subtitle">AI-Powered Code Quality & Security Analysis</p>
            </div>
           
        </div>
    </div>

    <!-- Stats Cards -->
    <div class="stats-grid">
        @if (isLoading)
        {
            @for (int i = 0; i < 4; i++)
            {
                <div class="stat-card loading">
                    <div class="stat-skeleton"></div>
                </div>
            }
        }
        else
        {
            <!-- Total Analyses -->
            <div class="stat-card analyses">
                <div class="stat-icon">
                    <i class="bi bi-file-earmark-code"></i>
                </div>
                <div class="stat-content">
                    <div class="stat-number">@(dashboardData?.Overview?.TotalAnalyses ?? 0)</div>
                    <div class="stat-label">Total Analyses</div>
                    <div class="stat-description">Code reviews completed</div>
                </div>
            </div>

            <!-- Average Quality -->
            <div class="stat-card quality @GetQualityCardClass()">
                <div class="stat-icon">
                    <i class="bi bi-speedometer2"></i>
                </div>
                <div class="stat-content">
                    <div class="stat-number">@(dashboardData?.Overview?.AverageQualityScore ?? 0)</div>
                    <div class="stat-label">Average Quality</div>
                    <div class="stat-description">@GetQualityDescription()</div>
                </div>
            </div>

            <!-- High Risk Issues -->
            <div class="stat-card risk">
                <div class="stat-icon">
                    <i class="bi bi-shield-exclamation"></i>
                </div>
                <div class="stat-content">
                    <div class="stat-number">@(dashboardData?.RiskDistribution?.High ?? 0)</div>
                    <div class="stat-label">High Risk Issues</div>
                    <div class="stat-description">Security vulnerabilities</div>
                </div>
            </div>

            <!-- Queue Status -->
            <div class="stat-card queue">
                <div class="stat-icon">
                    <i class="bi bi-hourglass-split"></i>
                </div>
                <div class="stat-content">
                    <div class="stat-number">@(dashboardData?.Overview?.PendingAnalyses ?? 0)</div>
                    <div class="stat-label">Pending</div>
                    <div class="stat-description">@GetQueueStatus()</div>
                </div>
            </div>
        }
    </div>

    <!-- Recent Analyses -->
    <div class="analyses-section">
        <div class="section-header">
            <h2 class="section-title">
                <i class="bi bi-clock-history"></i>
                Recent Code Reviews
            </h2>
            <div class="section-actions">
                @if (dashboardData?.RecentAnalyses?.Any() == true)
                {
                    <span class="analyses-count">@dashboardData.RecentAnalyses.Count() results</span>
                }
            </div>
        </div>

        @if (dashboardData?.RecentAnalyses?.Any() == true)
        {
            <div class="analyses-grid">
                @foreach (var analysis in dashboardData.RecentAnalyses.Take(6))
                {
                    <div class="analysis-card @GetAnalysisCardClass(analysis.RiskLevel)">
                        <div class="analysis-header">
                            <div class="analysis-repo">
                                <i class="bi bi-github"></i>
                                <span>@(string.IsNullOrEmpty(analysis.RepoName) ? "Unknown Repository" : analysis.RepoName.Split('/').LastOrDefault())</span>
                            </div>
                            <div class="analysis-status">
                                <span class="status-badge @GetStatusClass(analysis.Status)">@analysis.Status</span>
                            </div>
                        </div>
                        
                        <div class="analysis-content">
                            <h3 class="analysis-title">@GetFormattedTitle(analysis.PrTitle)</h3>
                            <div class="analysis-pr">
                                <i class="bi bi-git"></i>
                                PR #@analysis.PrNumber by @analysis.PrAuthor
                            </div>
                        </div>

                        <div class="analysis-metrics">
                            <div class="metric">
                                <div class="metric-value quality-score @GetQualityClass(analysis.QualityScore)">
                                    @analysis.QualityScore
                                </div>
                                <div class="metric-label">Quality Score</div>
                            </div>
                            <div class="metric">
                                <div class="metric-value risk-level @GetRiskClass(analysis.RiskLevel)">
                                    <i class="@GetRiskIcon(analysis.RiskLevel)"></i>
                                    @analysis.RiskLevel
                                </div>
                                <div class="metric-label">Risk Level</div>
                            </div>
                        </div>

                        <div class="analysis-footer">
                            <div class="analysis-time">
                                <i class="bi bi-clock"></i>
                                @GetTimeAgo(analysis.ProcessedAt)
                            </div>
                            <button class="detail-button" @onclick="() => ShowAnalysisDetail(analysis.Id)">
                                <i class="bi bi-eye"></i>
                                Details
                            </button>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="empty-state">
                <div class="empty-illustration">
                    <i class="bi bi-code-slash"></i>
                </div>
                <h3 class="empty-title">No Code Reviews Yet</h3>
                <p class="empty-description">
                    Connect your repository and create a pull request to start analyzing your code with AI.
                </p>
                <div class="empty-actions">
                    <!-- Refresh button removed -->
                </div>
            </div>
        }
    </div>
</div>

<!-- Analysis Detail Modal -->
@if (showDetailModal && selectedAnalysis != null)
{
    <div class="modal-overlay" @onclick="CloseDetailModal">
        <div class="modal-content" @onclick:stopPropagation>
            <div class="modal-header">
                <h3 class="modal-title">
                    <i class="bi bi-file-earmark-code"></i>
                    Analysis Details - PR #@selectedAnalysis.PrNumber
                </h3>
                <button class="modal-close" @onclick="CloseDetailModal">
                    <i class="bi bi-x-lg"></i>
                </button>
            </div>
            
            <div class="modal-body">
                <!-- Basic Info -->
                <div class="detail-section">
                    <div class="detail-header">
                        <h4><i class="bi bi-info-circle"></i> Basic Information</h4>
                    </div>
                    <div class="detail-grid">
                        <div class="detail-item">
                            <span class="detail-label">Repository:</span>
                            <span class="detail-value">@selectedAnalysis.RepoName</span>
                        </div>
                        <div class="detail-item">
                            <span class="detail-label">PR Title:</span>
                            <span class="detail-value">@selectedAnalysis.PrTitle</span>
                        </div>
                        <div class="detail-item">
                            <span class="detail-label">Author:</span>
                            <span class="detail-value">@selectedAnalysis.PrAuthor</span>
                        </div>
                        <div class="detail-item">
                            <span class="detail-label">Quality Score:</span>
                            <span class="detail-value quality-@GetQualityClass(selectedAnalysis.QualityScore)">
                                @selectedAnalysis.QualityScore/100
                            </span>
                        </div>
                        <div class="detail-item">
                            <span class="detail-label">Risk Level:</span>
                            <span class="detail-value risk-@GetRiskClass(selectedAnalysis.RiskLevel)">
                                <i class="@GetRiskIcon(selectedAnalysis.RiskLevel)"></i>
                                @selectedAnalysis.RiskLevel
                            </span>
                        </div>
                        <div class="detail-item">
                            <span class="detail-label">Processed:</span>
                            <span class="detail-value">@selectedAnalysis.ProcessedAt.ToString("MMM dd, yyyy HH:mm")</span>
                        </div>
                    </div>
                </div>

                <!-- Summary -->
                @if (!string.IsNullOrEmpty(selectedAnalysis.Summary))
                {
                    <div class="detail-section">
                        <div class="detail-header">
                            <h4><i class="bi bi-card-text"></i> Analysis Summary</h4>
                        </div>
                        <div class="summary-content">
                            @((Microsoft.AspNetCore.Components.MarkupString)selectedAnalysis.Summary)
                        </div>
                    </div>
                }

                <!-- GPT Suggestions -->
                @if (selectedAnalysis.GptSuggestions?.Any() == true)
                {
                    <div class="detail-section">
                        <div class="detail-header">
                            <h4><i class="bi bi-robot"></i> AI Suggestions (@selectedAnalysis.GptSuggestions.Count)</h4>
                        </div>
                        <div class="suggestions-list">
                            @foreach (var suggestion in selectedAnalysis.GptSuggestions)
                            {
                                <div class="suggestion-item">
                                    <div class="suggestion-header">
                                        <span class="suggestion-type @suggestion.Type.ToLower()">@suggestion.Type</span>
                                        <span class="suggestion-priority priority-@suggestion.Priority.ToLower()">@suggestion.Priority</span>
                                        <span class="impact-score">Impact: @suggestion.ImpactScore/10</span>
                                    </div>
                                    <h5 class="suggestion-title">@suggestion.Title</h5>
                                    <p class="suggestion-description">@suggestion.Description</p>
                                    @if (!string.IsNullOrEmpty(suggestion.SuggestedCode))
                                    {
                                        <div class="suggested-code">
                                            <strong>Suggested Code:</strong>
                                            <pre><code>@suggestion.SuggestedCode</code></pre>
                                        </div>
                                    }
                                    @if (suggestion.Tags?.Any() == true)
                                    {
                                        <div class="suggestion-tags">
                                            @foreach (var tag in suggestion.Tags)
                                            {
                                                <span class="tag">@tag</span>
                                            }
                                        </div>
                                    }
                                </div>
                            }
                        </div>
                    </div>
                }

                <!-- Roslyn Findings -->
                @if (selectedAnalysis.RoslynFindings?.Any() == true)
                {
                    <div class="detail-section">
                        <div class="detail-header">
                            <h4><i class="bi bi-bug"></i> Roslyn Findings (@selectedAnalysis.RoslynFindings.Count)</h4>
                        </div>
                        <div class="findings-list">
                            @foreach (var finding in selectedAnalysis.RoslynFindings)
                            {
                                <div class="finding-item">
                                    <div class="finding-header">
                                        <span class="finding-rule">@finding.RuleId</span>
                                        <span class="finding-severity severity-@finding.Severity.ToLower()">@finding.Severity</span>
                                        <span class="finding-category">@finding.Category</span>
                                    </div>
                                    <p class="finding-message">@finding.Message</p>
                                    <div class="finding-location">
                                        <i class="bi bi-file-code"></i>
                                        @finding.FilePath:@finding.LineNumber
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>
            
            <div class="modal-footer">
                <button class="secondary-button" @onclick="CloseDetailModal">
                    Close
                </button>
            </div>
        </div>
    </div>
}

@* Toast Notification *@
@if (showToast)
{
    <div class="toast-container">
        <div class="toast @toastVariant">
            <div>
                <div class="toast-title">@toastTitle</div>
                <div class="toast-text">@toastMessage</div>
                <div class="progress"><div></div></div>
            </div>
            <button class="toast-close" @onclick="CloseToast"><i class="bi bi-x-lg"></i></button>
        </div>
    </div>
}

@code {
    private bool isLoading = true;
    private DashboardData? dashboardData;
    private bool showDetailModal = false;
    private AnalysisDetail? selectedAnalysis = null;
    private bool loadingDetail = false;
    private HubConnection? hubConnection;
    private bool showToast = false;
    private string toastTitle = string.Empty;
    private string toastMessage = string.Empty;
    private string toastVariant = "info";
    private System.Timers.Timer? toastTimer;

    private sealed class NewPrNotification
    {
        public string Repo { get; set; } = string.Empty;
        public int PrNumber { get; set; }
        public string Title { get; set; } = string.Empty;
        public string Author { get; set; } = string.Empty;
    }

    private sealed class PrClosedNotification
    {
        public string Repo { get; set; } = string.Empty;
        public int PrNumber { get; set; }
        public string Title { get; set; } = string.Empty;
        public string AnalysisId { get; set; } = string.Empty;
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadDashboardData();
        await InitializeSignalRAsync();
    }

    private async Task LoadDashboardData()
    {
        try
        {
            isLoading = true;
            await InvokeAsync(StateHasChanged);
            dashboardData = await ApiService.GetDashboardDataAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading dashboard data: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task RefreshData()
    {
        await LoadDashboardData();
    }
    

    private async Task InitializeSignalRAsync()
    {
        try
        {
            var hubUrl = "https://code-vision.up.railway.app/hubs/analysis";
            hubConnection = new HubConnectionBuilder()
                .WithUrl(hubUrl)
                .WithAutomaticReconnect()
                .Build();

            hubConnection.On<string>("AnalysisUpdated", async _ =>
            {
                if (!loadingDetail)
                {
                    await LoadDashboardData();
                    await InvokeAsync(StateHasChanged);
                    await PlayNotificationSoundAsync();
                }
            });

            hubConnection.On<string>("AnalysisCompleted", async _ =>
            {
                await LoadDashboardData();
                await InvokeAsync(StateHasChanged);
                await PlayNotificationSoundAsync();
            });

            hubConnection.On<NewPrNotification>("NewPullRequest", async pr =>
            {
                var repo = pr?.Repo ?? string.Empty;
                var number = pr?.PrNumber ?? 0;
                var title = pr?.Title ?? string.Empty;
                var author = pr?.Author ?? string.Empty;
                
                
                ShowToast(
                    title: "New Pull Request",
                    message: $"{repo} · #{number}\n{title} — {author}",
                    variant: "info");
                await PlayNotificationSoundAsync();
                
                // Wait a bit for the PR to be saved to database
                await Task.Delay(1000);
                
                // Refresh dashboard to show new PR in the list
                await LoadDashboardData();
                await InvokeAsync(StateHasChanged);
            });

            hubConnection.On<PrClosedNotification>("PullRequestClosed", async pr =>
            {
                var repo = pr?.Repo ?? string.Empty;
                var number = pr?.PrNumber ?? 0;
                var title = pr?.Title ?? string.Empty;
                var analysisId = pr?.AnalysisId ?? string.Empty;
                
                ShowToast(
                    title: "Pull Request Closed",
                    message: $"{repo} · #{number}\n{title} — Deleted from database",
                    variant: "warning");

                // Remove from local list immediately for instant UI update
                if (dashboardData?.RecentAnalyses != null && !string.IsNullOrEmpty(analysisId))
                {
                    var analysisToRemove = dashboardData.RecentAnalyses
                        .FirstOrDefault(a => a.Id == analysisId);
                    if (analysisToRemove != null)
                    {
                        dashboardData.RecentAnalyses.Remove(analysisToRemove);
                    }
                }

                // Also refresh from server to ensure consistency
                await LoadDashboardData();
                await InvokeAsync(StateHasChanged);
            });

            await hubConnection.StartAsync();
        }
        catch (Exception ex)
        {
            // SignalR başarısız olursa sessizce devam et
            Console.WriteLine($"SignalR connection failed: {ex.Message}");
        }
    }

    private async Task PlayNotificationSoundAsync()
    {
        try
        {
            await JS.InvokeVoidAsync("CodeVision.playChime");
        }
        catch { }
    }

    private string GetQualityCardClass()
    {
        var score = dashboardData?.Overview?.AverageQualityScore ?? 0;
        return score switch
        {
            >= 80 => "excellent",
            >= 60 => "good", 
            >= 40 => "fair",
            _ => "poor"
        };
    }

    private string GetQualityDescription()
    {
        var score = dashboardData?.Overview?.AverageQualityScore ?? 0;
        return score switch
        {
            >= 80 => "Excellent code quality",
            >= 60 => "Good code quality",
            >= 40 => "Fair code quality", 
            _ => "Needs improvement"
        };
    }

    private string GetQueueStatus()
    {
        var pending = dashboardData?.Overview?.PendingAnalyses ?? 0;
        return pending switch
        {
            0 => "Queue is empty",
            1 => "1 analysis waiting",
            _ => $"{pending} analyses waiting"
        };
    }

    private string GetAnalysisCardClass(string riskLevel)
    {
        return riskLevel?.ToLower() switch
        {
            "high" => "high-risk",
            "medium" => "medium-risk", 
            "low" => "low-risk",
            _ => "unknown-risk"
        };
    }

    private string GetStatusClass(string status)
    {
        return status?.ToLower() switch
        {
            "completed" => "completed",
            "pending" => "pending",
            "processing" => "processing",
            "failed" => "failed",
            _ => "unknown"
        };
    }

    private string GetQualityClass(int score)
    {
        return score switch
        {
            >= 80 => "excellent",
            >= 60 => "good",
            >= 40 => "fair",
            _ => "poor"
        };
    }

    private string GetRiskClass(string riskLevel)
    {
        return riskLevel?.ToLower() switch
        {
            "high" => "high-risk",
            "medium" => "medium-risk",
            "low" => "low-risk", 
            _ => "unknown-risk"
        };
    }

    private string GetRiskIcon(string riskLevel)
    {
        return riskLevel?.ToLower() switch
        {
            "high" => "bi bi-shield-exclamation",
            "medium" => "bi bi-shield-check",
            "low" => "bi bi-shield",
            _ => "bi bi-question-circle"
        };
    }

    private string GetFormattedTitle(string title)
    {
        if (string.IsNullOrEmpty(title))
            return "Untitled Pull Request";
        
        // Truncate long titles
        return title.Length > 60 ? $"{title[..60]}..." : title;
    }

    private string GetTimeAgo(DateTime processedAt)
    {
        var timeSpan = DateTime.UtcNow - processedAt.ToUniversalTime();
        
        return timeSpan.TotalDays switch
        {
            >= 7 => $"{(int)(timeSpan.TotalDays / 7)} week(s) ago",
            >= 1 => $"{(int)timeSpan.TotalDays} day(s) ago",
            >= 1/24.0 => $"{(int)timeSpan.TotalHours} hour(s) ago",
            >= 1/(24.0 * 60) => $"{(int)timeSpan.TotalMinutes} minute(s) ago",
            _ => "Just now"
        };
    }

    private async Task ShowAnalysisDetail(string analysisId)
    {
        Console.WriteLine($"🚀 DETAILS BUTONU TIKLANDI: {analysisId}");
        
        if (loadingDetail) 
        {
            Console.WriteLine("⏳ ZATEN YÜKLENİYOR, ÇIKIŞ YAPILIYOR");
            return;
        }
        
        try
        {
            Console.WriteLine($"🔄 LOADING BAŞLATILIYOR...");
            loadingDetail = true;
            selectedAnalysis = await ApiService.GetAnalysisDetailAsync(analysisId);
            Console.WriteLine($"📦 API SONUCU: {selectedAnalysis?.Id}");
            
            if (selectedAnalysis != null)
            {
                Console.WriteLine($"✅ MODAL AÇILIYOR: showDetailModal = true");
                showDetailModal = true;
                await InvokeAsync(StateHasChanged);
                Console.WriteLine($"🔄 StateHasChanged ÇAĞIRILDI");
            }
            else
            {
                Console.WriteLine($"❌ selectedAnalysis NULL, MODAL AÇILMAYACAK");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"💥 HATA: {ex.Message}");
        }
        finally
        {
            loadingDetail = false;
            Console.WriteLine($"🏁 LOADING TAMAMLANDI");
        }
    }

    private async Task CloseDetailModal()
    {
        showDetailModal = false;
        selectedAnalysis = null;
        await InvokeAsync(StateHasChanged);
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            try { await hubConnection.DisposeAsync(); } catch { }
        }

        if (toastTimer != null)
        {
            toastTimer.Stop();
            toastTimer.Dispose();
            toastTimer = null;
        }
    }

    private void ShowToast(string title, string message, string variant = "info")
    {
        toastTitle = title;
        toastMessage = message;
        toastVariant = variant;
        showToast = true;
        toastTimer?.Stop();
        toastTimer?.Dispose();
        toastTimer = new System.Timers.Timer(60_000);
        toastTimer.Elapsed += (_, __) =>
        {
            showToast = false;
            InvokeAsync(StateHasChanged);
            toastTimer?.Stop();
            toastTimer?.Dispose();
            toastTimer = null;
        };
        toastTimer.AutoReset = false;
        toastTimer.Start();
        InvokeAsync(StateHasChanged);
    }

    private void CloseToast()
    {
        showToast = false;
        toastTimer?.Stop();
        toastTimer?.Dispose();
        toastTimer = null;
    }
}