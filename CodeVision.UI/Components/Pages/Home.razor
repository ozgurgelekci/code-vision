@page "/"
@using CodeVision.UI.Services
@inject IApiService ApiService
@rendermode InteractiveServer

<PageTitle>CodeVision - AI Code Analysis Dashboard</PageTitle>

<style>
    /* Inline Modern Dashboard Override */
    .modern-dashboard {
        padding: 24px !important;
        max-width: 1400px !important;
        margin: 0 auto !important;
        background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%) !important;
        min-height: 100vh !important;
        font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif !important;
    }

    .dashboard-header {
        margin-bottom: 32px !important;
    }

    .header-content {
        display: flex !important;
        justify-content: space-between !important;
        align-items: center !important;
        background: white !important;
        padding: 24px !important;
        border-radius: 16px !important;
        box-shadow: 0 1px 3px rgba(0,0,0,0.1) !important;
        border: 1px solid #e2e8f0 !important;
    }

    .dashboard-title {
        font-size: 28px !important;
        font-weight: 700 !important;
        color: #1a202c !important;
        margin: 0 !important;
        display: flex !important;
        align-items: center !important;
        gap: 12px !important;
    }

    .dashboard-title i {
        color: #3b82f6 !important;
        font-size: 32px !important;
    }

    .dashboard-subtitle {
        color: #64748b !important;
        font-size: 16px !important;
        margin: 8px 0 0 0 !important;
        font-weight: 400 !important;
    }

    .refresh-button {
        background: #3b82f6 !important;
        color: white !important;
        border: none !important;
        padding: 12px 20px !important;
        border-radius: 12px !important;
        cursor: pointer !important;
        display: flex !important;
        align-items: center !important;
        gap: 8px !important;
        font-weight: 600 !important;
    }

    .stats-grid {
        display: grid !important;
        grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)) !important;
        gap: 20px !important;
        margin-bottom: 32px !important;
    }

    .stat-card {
        background: white !important;
        border-radius: 16px !important;
        padding: 24px !important;
        border: 1px solid #e2e8f0 !important;
        box-shadow: 0 1px 3px rgba(0,0,0,0.1) !important;
        transition: transform 0.2s ease !important;
    }

    .stat-card:hover {
        transform: translateY(-2px) !important;
        box-shadow: 0 8px 24px rgba(0,0,0,0.12) !important;
    }

    .stat-icon {
        width: 48px !important;
        height: 48px !important;
        border-radius: 12px !important;
        display: flex !important;
        align-items: center !important;
        justify-content: center !important;
        font-size: 24px !important;
        margin-bottom: 16px !important;
        background: linear-gradient(135deg, #ddd6fe, #c4b5fd) !important;
        color: #7c3aed !important;
    }

    .stat-number {
        font-size: 32px !important;
        font-weight: 800 !important;
        color: #1a202c !important;
        margin-bottom: 4px !important;
    }

    .stat-label {
        font-size: 14px !important;
        font-weight: 600 !important;
        color: #64748b !important;
        margin-bottom: 8px !important;
    }

    .stat-description {
        font-size: 13px !important;
        color: #94a3b8 !important;
    }

    .analyses-section {
        margin-top: 32px !important;
    }

    .section-title {
        font-size: 20px !important;
        font-weight: 700 !important;
        color: #1a202c !important;
        display: flex !important;
        align-items: center !important;
        gap: 8px !important;
        margin: 0 0 24px 0 !important;
    }

    .analyses-grid {
        display: grid !important;
        grid-template-columns: repeat(auto-fit, minmax(380px, 1fr)) !important;
        gap: 20px !important;
    }

    .analysis-card {
        background: white !important;
        border-radius: 16px !important;
        padding: 24px !important;
        border: 1px solid #e2e8f0 !important;
        box-shadow: 0 1px 3px rgba(0,0,0,0.1) !important;
        transition: transform 0.2s ease !important;
    }

    .analysis-card.high-risk {
        border-left: 4px solid #ef4444 !important;
    }

    .analysis-card.low-risk {
        border-left: 4px solid #10b981 !important;
    }

    /* Hide old layout completely */
    .page, .sidebar, .top-row, .navbar, .nav-scrollable, .content {
        display: none !important;
    }

    /* Force main content to be visible */
    body {
        margin: 0 !important;
        padding: 0 !important;
    }
</style>

<div class="modern-dashboard">
    <!-- Header -->
    <div class="dashboard-header">
        <div class="header-content">
            <div class="header-info">
                <h1 class="dashboard-title">
                    <i class="bi bi-cpu"></i>
                    CodeVision Dashboard
                </h1>
                <p class="dashboard-subtitle">AI-Powered Code Quality & Security Analysis</p>
            </div>
            <button class="refresh-button @(isLoading ? "loading" : "")" @onclick="RefreshData" disabled="@isLoading">
                @if (isLoading)
                {
                    <i class="bi bi-arrow-repeat spin"></i>
                }
                else
                {
                    <i class="bi bi-arrow-clockwise"></i>
                }
                Refresh
            </button>
        </div>
    </div>

    <!-- Stats Cards -->
    <div class="stats-grid">
        @if (isLoading)
        {
            @for (int i = 0; i < 4; i++)
            {
                <div class="stat-card loading">
                    <div class="stat-skeleton"></div>
                </div>
            }
        }
        else
        {
            <!-- Total Analyses -->
            <div class="stat-card analyses">
                <div class="stat-icon">
                    <i class="bi bi-file-earmark-code"></i>
                </div>
                <div class="stat-content">
                    <div class="stat-number">@(dashboardData?.Overview?.TotalAnalyses ?? 0)</div>
                    <div class="stat-label">Total Analyses</div>
                    <div class="stat-description">Code reviews completed</div>
                </div>
            </div>

            <!-- Average Quality -->
            <div class="stat-card quality @GetQualityCardClass()">
                <div class="stat-icon">
                    <i class="bi bi-speedometer2"></i>
                </div>
                <div class="stat-content">
                    <div class="stat-number">@(dashboardData?.Overview?.AverageQualityScore ?? 0)</div>
                    <div class="stat-label">Average Quality</div>
                    <div class="stat-description">@GetQualityDescription()</div>
                </div>
            </div>

            <!-- High Risk Issues -->
            <div class="stat-card risk">
                <div class="stat-icon">
                    <i class="bi bi-shield-exclamation"></i>
                </div>
                <div class="stat-content">
                    <div class="stat-number">@(dashboardData?.RiskDistribution?.High ?? 0)</div>
                    <div class="stat-label">High Risk Issues</div>
                    <div class="stat-description">Security vulnerabilities</div>
                </div>
            </div>

            <!-- Queue Status -->
            <div class="stat-card queue">
                <div class="stat-icon">
                    <i class="bi bi-hourglass-split"></i>
                </div>
                <div class="stat-content">
                    <div class="stat-number">@(dashboardData?.Overview?.PendingAnalyses ?? 0)</div>
                    <div class="stat-label">Pending</div>
                    <div class="stat-description">@GetQueueStatus()</div>
                </div>
            </div>
        }
    </div>

    <!-- Recent Analyses -->
    <div class="analyses-section">
        <div class="section-header">
            <h2 class="section-title">
                <i class="bi bi-clock-history"></i>
                Recent Code Reviews
            </h2>
            <div class="section-actions">
                @if (dashboardData?.RecentAnalyses?.Any() == true)
                {
                    <span class="analyses-count">@dashboardData.RecentAnalyses.Count() results</span>
                }
            </div>
        </div>

        @if (dashboardData?.RecentAnalyses?.Any() == true)
        {
            <div class="analyses-grid">
                @foreach (var analysis in dashboardData.RecentAnalyses.Take(6))
                {
                    <div class="analysis-card @GetAnalysisCardClass(analysis.RiskLevel)">
                        <div class="analysis-header">
                            <div class="analysis-repo">
                                <i class="bi bi-github"></i>
                                <span>@(string.IsNullOrEmpty(analysis.RepoName) ? "Unknown Repository" : analysis.RepoName.Split('/').LastOrDefault())</span>
                            </div>
                            <div class="analysis-status">
                                <span class="status-badge @GetStatusClass(analysis.Status)">@analysis.Status</span>
                            </div>
                        </div>
                        
                        <div class="analysis-content">
                            <h3 class="analysis-title">@GetFormattedTitle(analysis.PrTitle)</h3>
                            <div class="analysis-pr">
                                <i class="bi bi-git"></i>
                                PR #@analysis.PrNumber by @analysis.PrAuthor
                            </div>
                        </div>

                        <div class="analysis-metrics">
                            <div class="metric">
                                <div class="metric-value quality-score @GetQualityClass(analysis.QualityScore)">
                                    @analysis.QualityScore
                                </div>
                                <div class="metric-label">Quality Score</div>
                            </div>
                            <div class="metric">
                                <div class="metric-value risk-level @GetRiskClass(analysis.RiskLevel)">
                                    <i class="@GetRiskIcon(analysis.RiskLevel)"></i>
                                    @analysis.RiskLevel
                                </div>
                                <div class="metric-label">Risk Level</div>
                            </div>
                        </div>

                        <div class="analysis-footer">
                            <div class="analysis-time">
                                <i class="bi bi-clock"></i>
                                @GetTimeAgo(analysis.ProcessedAt)
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="empty-state">
                <div class="empty-illustration">
                    <i class="bi bi-code-slash"></i>
                </div>
                <h3 class="empty-title">No Code Reviews Yet</h3>
                <p class="empty-description">
                    Connect your repository and create a pull request to start analyzing your code with AI.
                </p>
                <div class="empty-actions">
                    <button class="primary-button" @onclick="RefreshData">
                        <i class="bi bi-arrow-clockwise"></i>
                        Check for Updates
                    </button>
                </div>
            </div>
        }
    </div>
</div>

@code {
    private bool isLoading = true;
    private DashboardData? dashboardData;

    protected override async Task OnInitializedAsync()
    {
        await LoadDashboardData();
    }

    private async Task LoadDashboardData()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            dashboardData = await ApiService.GetDashboardDataAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Dashboard loading error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task RefreshData()
    {
        await LoadDashboardData();
    }

    private string GetQualityCardClass()
    {
        var score = dashboardData?.Overview?.AverageQualityScore ?? 0;
        return score switch
        {
            >= 80 => "excellent",
            >= 60 => "good", 
            >= 40 => "fair",
            _ => "poor"
        };
    }

    private string GetQualityDescription()
    {
        var score = dashboardData?.Overview?.AverageQualityScore ?? 0;
        return score switch
        {
            >= 80 => "Excellent code quality",
            >= 60 => "Good code quality",
            >= 40 => "Fair code quality", 
            _ => "Needs improvement"
        };
    }

    private string GetQueueStatus()
    {
        var pending = dashboardData?.Overview?.PendingAnalyses ?? 0;
        return pending switch
        {
            0 => "Queue is empty",
            1 => "1 analysis waiting",
            _ => $"{pending} analyses waiting"
        };
    }

    private string GetAnalysisCardClass(string riskLevel)
    {
        return riskLevel?.ToLower() switch
        {
            "high" => "high-risk",
            "medium" => "medium-risk", 
            "low" => "low-risk",
            _ => "unknown-risk"
        };
    }

    private string GetStatusClass(string status)
    {
        return status?.ToLower() switch
        {
            "completed" => "completed",
            "pending" => "pending",
            "processing" => "processing",
            "failed" => "failed",
            _ => "unknown"
        };
    }

    private string GetQualityClass(int score)
    {
        return score switch
        {
            >= 80 => "excellent",
            >= 60 => "good",
            >= 40 => "fair",
            _ => "poor"
        };
    }

    private string GetRiskClass(string riskLevel)
    {
        return riskLevel?.ToLower() switch
        {
            "high" => "high-risk",
            "medium" => "medium-risk",
            "low" => "low-risk", 
            _ => "unknown-risk"
        };
    }

    private string GetRiskIcon(string riskLevel)
    {
        return riskLevel?.ToLower() switch
        {
            "high" => "bi bi-shield-exclamation",
            "medium" => "bi bi-shield-check",
            "low" => "bi bi-shield",
            _ => "bi bi-question-circle"
        };
    }

    private string GetFormattedTitle(string title)
    {
        if (string.IsNullOrEmpty(title))
            return "Untitled Pull Request";
        
        // Truncate long titles
        return title.Length > 60 ? $"{title[..60]}..." : title;
    }

    private string GetTimeAgo(DateTime processedAt)
    {
        var timeSpan = DateTime.UtcNow - processedAt.ToUniversalTime();
        
        return timeSpan.TotalDays switch
        {
            >= 7 => $"{(int)(timeSpan.TotalDays / 7)} week(s) ago",
            >= 1 => $"{(int)timeSpan.TotalDays} day(s) ago",
            >= 1/24.0 => $"{(int)timeSpan.TotalHours} hour(s) ago",
            >= 1/(24.0 * 60) => $"{(int)timeSpan.TotalMinutes} minute(s) ago",
            _ => "Just now"
        };
    }
}